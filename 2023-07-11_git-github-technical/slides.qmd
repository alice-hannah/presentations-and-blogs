---
title: "Using Git and GitHub in the Scottish Government<br><img class='image1' src='images/git.svg' alt=''/>&nbsp;<img class='image1' src='images/github.svg' alt=''/>"
author: "Alice Byers, Data Innovation Team"
institute: "Scottish Government"
format:
  revealjs: 
    embed-resources: true
    slide-number: true
    logo: images/SG-logo.jpg
    controls: true
    link-external-newwindow: true
    theme: [default, styles.scss]
    code-line-numbers: false
    auto-stretch: false
execute:
  echo: true
  eval: false
  fig-format: "svg"
lang: en
---


## Aims

-   These slides aim to demonstrate the use of Git and GitHub in the Scottish Government when working in the SCOTS network.

-   An understanding of the concepts of version control, Git and GitHub is assumed. 
More information can be found in the [Introduction to Version Control slides](https://alicebyers5.github.io/presentations-and-blogs/2023-04-27_git-github-intro/slides.html).

-   Further guidance and resources for using version control on SCOTS are available on the [Statistics Group sharepoint site](https://scotsconnect.sharepoint.com/sites/StatisticsGroup-Org-SG/SitePages/Version-Control.aspx).


## Contents

-   [How to install and setup Git](#git-setup)

-   [A basic Git workflow](#git-workflow)

-   [How to use Git with RStudio integration](#using-git-with-rstudio-integration)

-   [GitHub and the Data Science Scotland organisation](#github-and-data-science-scotland)

-   [Using Git with GitHub](#using-git-with-github)

-   [Branches and other GitHub features](#theres-more)

-   [Links, resources and contact details](#resources)


# Git setup {.h1-blue}


## Install Git

-   Make an [iFix request](https://ifix.systems.gov.scot/assystnet/application.jsp#serviceOfferings/257) for "Git version 2.21.0.windows.1"

-   Git is a free and open-source software and therefore does not incur a cost to install


## Git Bash

-   Git Bash is a command line interface for using Git

-   It is installed with Git

![](images/screenshots/git-bash.png){fig-align="center" width=60%}


## Git Bash

-   Some basic commands include:

    - `pwd`; prints present working directory
  
    - `ls`; lists files contained in working directory
  
    - `cd <filepath>`; changes working directory

-   [Git Bash cheat sheet](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet)

-   ONS Learning Hub has further training on [Command Line Basics](https://analysisfunction.civilservice.gov.uk/training/command-line-basics/)


## Set name and email {.h2-no-padding .smaller}

-   Your name and email is linked to every commit you make using Git and cannot be changed retrospectively, therefore it is important to do this. 

-   If you plan to use GitHub, make sure your user name and email address match those associated with your GitHub account.

To do this in Git Bash, run:

```bash
git config --global user.name alicebyers5
git config --global user.email alice.byers@gov.scot
```

<p style="margin:0.5em;"></p>

To check this has worked:

```{bash eval = TRUE}
git config --global user.name
```
    
<p style="margin:0.5em;"></p>

```{bash eval = TRUE}
git config --global user.email
```


## Summary

-   Install Git via iFix

-   Set name and email address in Git Bash


# Git workflow {.h1-blue}


## Example project folder

<br>

![](images/screenshots/file-explorer.png){fig-align="center" width=80%}

::: {.notes}
-   Avoid storing projects using Git in OneDrive
:::


## Open Git Bash in working directory {.h2-no-padding}

::: {.panel-tabset}

### File Explorer

-   Right click in working folder and select 'Git Bash here'

![](images/screenshots/git-bash-here.png){fig-align="center" width=60%}
 
### cd in Git Bash

-   Open Git Bash from Windows start menu

-   Use `cd` command to change directory to your working folder

![](images/screenshots/cd.png){fig-align="center" width=50%}

:::


## Initiate Git respository {.h2-no-padding}

-   Run `git init` to initiate Git. 
This will create a .git folder within your project. 
(Note: you only need to do this once per project.)

![](images/screenshots/git-init.png){fig-align="center" width=65%}


## Create a gitignore file {.h2-no-padding}

-   A gitignore file defines what files **should not be tracked** by Git. 
This is especially important if you plan on using GitHub as sensitive information should not be made available there.

-   Generally, the following should be ignored:

    -   Data files

    -   Passwords or credentials

    -   Code that contains sensitive information

    -   Configuration files


## Create a gitignore file {.h2-no-padding}

To tell Git to ignore these files:

-   Create a new file in your directory called `.gitignore`. 
This can be done in the usual way in File Explorer, or by using the `touch` command in Git Bash.

-   Open the .gitignore file in a text editor (or R) and add names of folders and files to be ignored.

    -   This is a good [example gitignore](https://github.com/DataScienceScotland/welcome/blob/main/.gitignore) that contains many common data and R files. Copy the contents to the file you've just created.


## git status {.h2-no-padding .smaller}

-   Use `git status` to show a summary of your Git repository - run this often to check that your other git commands have done what you expect them to do

![](images/screenshots/git-status.png){fig-align="center" width=50%}

-   Notice that `data.csv` is not listed here. This is because we have told Git to ignore csv files in the gitignore.


## git add {.h2-no-padding .smaller}

-   Use `git add` to 'stage' files for the next commit

    - Either list the files you'd like to stage; e.g. `git add code.R`, or
    
    - To stage all tracked files, use a full stop; e.g. `git add .` 

![](images/screenshots/git-add.png){fig-align="center" width=60%}


## git add {.h2-no-padding .smaller}

-   Use `git status` to check that the correct files have been staged

![](images/screenshots/git-add-status.png){fig-align="center" width=60%}

-   Files names are now coloured green and listed under 'changed to be committed'


## git commit {.h2-no-padding .smaller}

-   Use `git commit` to add the files to the Git history. 

    - Accompany the commit with a message to give a [short and informative description](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits) of the changes.
    
![](images/screenshots/git-commit.png){fig-align="center" width=60%}


## Your first commit {.h2-no-padding}

-   Running `git status` again shows that there are no further changes to commit

![](images/screenshots/git-commit-status.png){fig-align="center" width=70%}


## Your first commit {.h2-no-padding}

-   Running `git log --oneline` will give a short summary of the commit history

![](images/screenshots/git-log.png){fig-align="center" width=70%}


## Make a change

-   Now, let's make a change to `code.R`. 
Add some commented lines to give the script a title and description.

<center>
::: {layout-ncol=2}

![Before](images/screenshots/code-orig.png){width=48%}

::: {.fragment}
![After](images/screenshots/code-change.png){width=48%}
:::

:::
</center>


## Make a change

-   Run `git status` to check that Git has recognised the change

![](images/screenshots/unstaged-change.png){fig-align="center" width=70%}


## git diff {.h2-no-padding}

- Run `git diff` to inspect what changes have been made to `code.R`.
Green text highlights additions and red text highlights deletions.

![](images/screenshots/git-diff.png){fig-align="center" width=70%}


## Stage and commit the change {.h2-no-padding}

-   Use `git add` and `git commit` to stage and commit the change to `code.R`.

![](images/screenshots/stage-and-commit-change.png){fig-align="center" width=70%}


## Stage and commit the change

-   Use `git log` to view the Git history - there are now two commits

![](images/screenshots/git-log-2.png){fig-align="center" width=70%}


## Tips

-   Commit early and often (especially when you're still learning)

-   Write [commit messages that make sense](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits) (your future self and colleagues will thank you)

-   Run `git status` often (especially when you're still learning)

    -   Check which files have changes tracked
    
    -   Check you have staged the correct files

    -   Check files that should be ignored are not being tracked (and committed!)


## Summary

-   Make a change

-   `git add`

-   `git commit`

-   `git status` often


# Using Git with RStudio Integration {.h1-blue}

## RStudio {.h2-no-padding .smaller}

-   Not all Git functionality is available from RStudio, but it can be more user-friendly and convenient if you're working with R

-   Changes are listed in the Git pane (usually in the top right window)

![](images/screenshots/rstudio-git.png){fig-align="center" width=65%}


## Open the commit window

-   Click the 'Commit' button to open up the commit window

![](images/screenshots/rstudio-git-2.png){fig-align="center" width=75%}


## Commiting a change from RStudio {.h2-no-padding .smaller}

-   Like Git Bash, you need to both stage and commit the change

-   To stage, tick the box next to each file you'd like to add (top-left pane)

-   To commit, enter a message and click 'Commit' (top-right pane)

![](images/screenshots/rstudio-commit.png){fig-align="center" width=55%}


# GitHub and<br> Data Science Scotland {.h1-blue}

## Create GitHub account {.smaller}

-   Use your work email address

    - Note that you can associate multiple email addresses with your account. 
    Just made sure you author commits for work projects with your gov.scot address.
    
-   Enable two-factor authentication

-   Add a (work appropriate) photo and username

-   Add your contact details and employer

-   Make your gov.scot email address public on your profile


## Join Data Science Scotland organisation

-   Work projects should all be hosted from the Data Science Scotland organisation

-   [Request to join](https://github.com/DataScienceScotland/welcome/issues/new?assignees=alicebyers5%2Ctomwilsonsco%2Cjsphdms&labels=member-request&template=new-member-request.yml&title=New+member+request) the organisation

    - You'll be asked to read the [SG GitHub User Responsibilities](https://erdm.scotland.gov.uk/documents/A42743383/details)
    
-   Once your request has been accepted, you will be free to create Git repositories in Data Science Scotland


## Create a repository

<center>
::: {.r-stack}
![](images/screenshots/github-new-repo-1.png){.fragment width=75%}

![](images/screenshots/github-new-repo-2.png){.fragment width=75%}
:::
</center>


## Create a repository

-   Select Data Science Scotland as owner for work projects

-   Give the repository a name

-   Choose whether to make your repository public or private

-   Add a README file

-   Click the green 'Create repository' button


# Using Git with GitHub {.h1-blue}

## Remote repository

-   A 'remote' is a version of your Git repository hosted on the internet or network somewhere.

-   This should be thought of as the main place where your repository is stored.

-   Most commonly, GitHub is used to host remote repositories.
But, it can also be a folder on an internal shared network.


## Remote repository {.smaller}

-   Users take a copy ('clone') of the repository from the remote

-   Users regularly 'push' their changes back to the remote so other users have access to the latest version

-   Users regularly 'pull' from the remote to ensure they are working with the latest version

```{mermaid}
%%| eval: true
%%| echo: false
%%| fig-height: 2.5

flowchart TB
  R[Remote]
  R <--> U1((<font size=2>User 1))
  R <--> U2((<font size=2>User 2))
  R <--> U3((<font size=2>User 3))
  
  linkStyle default stroke-width:1px;
```


## Create SSH key (one time setup) {.smaller}

-   Generate an SSH key in Git Bash

    ```{r engine = "bash"}
    ssh-keygen -t ed25519 -C "your_email@example.com"
    ```

    (this should be the email registered with your Github account)

-   Git Bash will ask where you want to create the key. 
The default location is recommended. 
(You can find your SSH home in Git Bash by running: `echo ~/.ssh`.)

-   Git Bash will ask if you want to set a passphrase. 
This is a local password that will be requested each time you use the key. 
It is OK not to set a passphrase here by just pressing enter twice.


## Add SSH key to GitHub account <br>(one time setup)

-   Copy the SSH key:

    ```{r engine = "bash"}
    # Navigate to the directory where you've saved your SSH key
    cd ~/.ssh

    # Print the contents of the public SSH key file
    cat id_ed25519.pub
    ```
    
    Copy the returned value from Git Bash.

-   [Add the copied SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account)


## Clone repository from GitHub {.h2-no-padding .smaller}

-   Now you have an SSH key setup, you should use the SSH URL to clone repositories from GitHub.

-   Click the green 'Code' button and under 'Clone', select 'SSH', and copy the address.

![](images/screenshots/copy-ssh.png){fig-align="center" width=50%}


## Clone repository from GitHub {.h2-no-padding .smaller}

-   Open Git Bash and navigate to the directory you'd like to clone the repository to

-   Use `git clone` to clone the repository

-   Change directory to the cloned repository using `cd`

![](images/screenshots/git-clone.png){fig-align="center" width=55%}


## Make a change {.h2-no-padding .smaller}

-   Add a new file

-   `git add`

-   `git commit`

![](images/screenshots/github-repo-change.png){fig-align="center" width=55%}


## Push to GitHub {.h2-no-padding .smaller}

-   'Push' the commit to GitHub (the remote) using `git push`

-   Note that `git status` now says the repository is up to date with origin/main (this is another name for the remote repository)

![](images/screenshots/git-push.png){fig-align="center" width=55%}


## Push to GitHub

-   The commit is now visible by viewing the GitHub repository

![](images/screenshots/git-push-2.png){fig-align="center" width=65%}


## Pull from GitHub {.h2-no-padding .smaller}

-   'Pull' from GitHub regularly to ensure your local copy of the repository is up to date (especially if other people are also working on the repository)

-   Note that there is now an extra commit when running `git log`

![](images/screenshots/git-pull.png){fig-align="center" width=65%}


## Summary

-   Use SSH keys to connect to GitHub from Git Bash

-   `git push` often

-   `git pull` often


# There's more! {.h1-blue}

::: {.notes}
-   The content covered so far will hopefully be enough to help you get started using Git and GitHub.
-   However, there are more features that are of particular use when working and collaborating with others.
:::


## Branches

-   Main branch?

-   Branches allow users to make changes to files without affecting the 'production-ready' main branch

-   Allows changes to be peer reviewed before being merged into main branch

-   More information on branching in the [Duck book](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#use-branching-appropriately)


## GitHub features {.smaller}

-   [Pull requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests) and [code review](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests)

    -   Open a pull request to merge a branch and request a code review from a collaborator

-   [Issues](https://docs.github.com/en/issues/tracking-your-work-with-issues)

    -   Keep track of bugs and requested enhancements for future development

-   [Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects)

    -   A task board for planning and tracking work. Integrates with issues and pull requests. 


## Resources

-   [Statistics Group sharepoint site](https://scotsconnect.sharepoint.com/sites/StatisticsGroup-Org-SG/SitePages/Version-Control.aspx)

-   [RAP Yammer Community](https://web.yammer.com/main/groups/eyJfdHlwZSI6Ikdyb3VwIiwiaWQiOiIxOTI2NDMyMzU4NSJ9/all)

- [Duck book](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html)

    - [Writing good commit messages](https://best-practice-and-impact.github.io/qa-of-code-guidance/version_control.html#write-short-and-informative-commits)
    
-   [Happy Git with R](https://happygitwithr.com/index.html)


## Contact

Alice Byers, Data Innovation Team

Scottish Government

[alice.byers\@gov.scot](mailto:alice.byers@gov.scot){.email}

